"Project on Restaurant Management System" by using Javafx, JDBC ,Oracle and SQL too.

*** Restaurants often struggle with managing daily operations such as order processing, table reservations, menu updates, staff coordination, billing, and inventory tracking. Relying on manual or paper-based methods can result in errors, slow service, poor customer experience, and inefficient use of resources. As customer expectations for convenience and speed rise, and as business grows, these challenges become even more pronounced.
The goal is to develop a Restaurant Management System that digitizes and streamlines all key restaurant operations. This system should provide:
•	An online platform for customers to view menus, place orders, reserve tables, make payments, and provide feedback.
•	Real-time order management for staff and kitchen, including order tracking, status updates, and efficient communication between waitstaff and kitchen staff.
•	Administrative tools for managers to update menus, manage inventory, generate sales and expense reports, and oversee staff schedules and profiles.
•	Automation of billing, reporting, and notification processes to reduce manual workload and errors.
•	Secure access and data management to protect customer and business information.
This comprehensive solution aims to improve operational efficiency, reduce errors, enhance customer satisfaction, and support business growth by providing a unified digital platform for all restaurant activities.***

Solution:
STEP 1: 
      Queries are
            create table menu_item(id int primary key,name varchar(40) not null,price decimal(10,2) not null);
            create table orders(order_id int primary key,table_number int not null,total decimal(10,2) not null,is_paid number(1) default 0,card_number varchar(16),feedback varchar(10),created_at timestamp default current_timestamp);
            create tables in sql like menu_item,orders,order_itemcreate table order_item(id number generated by default as identity primary key,order_id number,item_id number,foreign key (order_id) references orders(order_id),foreign key(item_id) references menu_item(id));
      Insert values into menu items.
       Sequences:
          create sequence orders_seq start with 1 increment by 1;
          create sequence order_item_seq start with 1 increment by 1;
STEP 2:
      create a project in eclipse ..............
      Build Path (configure OJDBC and JavaFx)
STEP 3:
      Add VM arguments :
            First click on the run option then click run as config in rightside we see arguments and click on that in that we have VM Arguments add below path
              Path :***  --module-path "C:\Users\LENOVO\Downloads\openjfx-21.0.7_windows-x64_bin-sdk\javafx-sdk-21.0.7\lib" --add-modules javafx.controls,javafx.fxml,java.sql***
      Modify the Module info.java:
                module majorproject {
	                requires javafx.controls;
	                requires javafx.fxml;
	                requires java.sql;
	
	            opens application to javafx.graphics, javafx.fxml;
          }

STEP 4: Run the Application
    create a project in that click on src int that right click create two classes like MenuItem Orders

         #### Main program: #####

package application;

import javafx.application.Application;
import javafx.collections.*;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.stage.Stage;
import java.sql.*;
import java.util.*;
import java.util.function.Supplier;

public class Main extends Application {

    static class MenuItem {
        private final int id;
        private final String name;
        private final double price;
        MenuItem(int id, String name, double price) {
            this.id = id; this.name = name; this.price = price;
        }
        public int getId() { return id; }
        public String getName() { return name; }
        public double getPrice() { return price; }
    }

    static class Order {
        int orderId;
        int tableNumber;
        double total;
        boolean isPaid;
        String cardNumber;
        String feedback;

        @Override
        public String toString() {
            return "Table " + tableNumber + " | ₹" + total + (isPaid ? " (PAID)" : " (UNPAID)");
        }
    }

    private final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private final String DB_USER = "your username";
    private final String DB_PASS = "your password";

    private final ObservableList<MenuItem> menu = FXCollections.observableArrayList();
    private final ObservableList<Order> orders = FXCollections.observableArrayList();

    public static void main(String[] args) {
        launch();
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Welcome - Tech Titans Restaurant");
        loadMenu();
        loadOrders();

        Button startBtn = new Button("Start Ordering");
        startBtn.setOnAction(e -> showMainPanel(primaryStage));

        VBox welcomePane = new VBox(20);
        welcomePane.setPadding(new Insets(20));
        welcomePane.setStyle("-fx-alignment: center;");
        Label title = new Label("🍽️ Welcome to Tech Titans Restaurant 🍽️");
        title.setStyle("-fx-font-size: 20pt; -fx-text-fill: darkblue;");
        welcomePane.getChildren().addAll(title, startBtn);

        primaryStage.setScene(new Scene(welcomePane, 500, 300));
        primaryStage.setOnCloseRequest(e -> {
            if (hasUnpaidOrders()) {
                e.consume(); // prevent exit
                showAlert("Unpaid Orders", "You have unpaid orders. Please pay before exiting!");
            }
        });
        primaryStage.show();
    }

    private boolean hasUnpaidOrders() {
        return orders.stream().anyMatch(o -> !o.isPaid);
    }

    private void showMainPanel(Stage primary) {
        TableView<MenuItem> menuTable = createMenuTable();
        ListView<Order> orderList = new ListView<>(orders);

        Button placeBtn = new Button("Place Order");
        placeBtn.setOnAction(e -> placeOrder(menuTable));

        Button payBtn = new Button("Pay Bill");
        payBtn.setOnAction(e -> payBill(orderList));

        Button payAllBtn = new Button("Pay All Bills");
        payAllBtn.setOnAction(e -> payAllBills());

        Button adminBtn = new Button("Admin Panel");
        adminBtn.setOnAction(e -> showAdminPanel());

        Button exitBtn = new Button("Exit");
        exitBtn.setOnAction(e -> {
            if (hasUnpaidOrders()) {
                showAlert("Unpaid Orders", "You have unpaid orders. Please pay before exiting!");
            } else {
                primary.close();
            }
        });

        VBox left = new VBox(10, new Label("Menu"), menuTable, placeBtn);
        VBox right = new VBox(10, new Label("Unpaid/Paid Orders"), orderList, payBtn, payAllBtn, adminBtn, exitBtn);
        left.setPadding(new Insets(10));
        right.setPadding(new Insets(10));

        primary.setScene(new Scene(new HBox(10, left, right), 900, 600));
        primary.setTitle("Restaurant System - Tech Titans");
    }

    private TableView<MenuItem> createMenuTable() {
        TableView<MenuItem> tv = new TableView<>(menu);
        tv.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        tv.getColumns().addAll(
            tableCol("ID", i -> i.getId()),
            tableCol("Name", i -> i.getName()),
            tableCol("Price", i -> i.getPrice())
        );
        return tv;
    }

    private <T> TableColumn<MenuItem, T> tableCol(String title, javafx.util.Callback<MenuItem, T> cb) {
        TableColumn<MenuItem,T> col = new TableColumn<>(title);
        col.setCellValueFactory(c -> new javafx.beans.property.SimpleObjectProperty<>(cb.call(c.getValue())));
        return col;
    }

    private void loadMenu() {
        menu.clear();
        try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             Statement s = c.createStatement();
             ResultSet rs = s.executeQuery("SELECT id, name, price FROM menu_item")) {
            while (rs.next()) {
                menu.add(new MenuItem(rs.getInt(1), rs.getString(2), rs.getDouble(3)));
            }
        } catch (Exception ex) {
            showAlert("Error loading menu", ex.getMessage());
        }
    }

    private void loadOrders() {
        orders.clear();
        try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             Statement s = c.createStatement();
             ResultSet rs = s.executeQuery("SELECT * FROM orders")) {
            while (rs.next()) {
                Order o = new Order();
                o.orderId = rs.getInt("order_id");
                o.tableNumber = rs.getInt("table_number");
                o.total = rs.getDouble("total");
                o.isPaid = rs.getInt("is_paid") == 1;
                o.cardNumber = rs.getString("card_number");
                o.feedback = rs.getString("feedback");
                orders.add(o);
            }
        } catch (Exception ex) {
            showAlert("Error loading orders", ex.getMessage());
        }
    }

    private void placeOrder(TableView<MenuItem> menuTable) {
        List<MenuItem> selectedItems = menuTable.getSelectionModel().getSelectedItems();
        if (selectedItems.isEmpty()) {
            showAlert("Select items before ordering", "");
            return;
        }

        TextInputDialog td = new TextInputDialog();
        td.setHeaderText("Table Number (1-10):");
        int tno;
        try {
            tno = Integer.parseInt(td.showAndWait().orElse(""));
            if (tno < 1 || tno > 10) throw new Exception();
        } catch (Exception ex) {
            showAlert("Invalid table number", "");
            return;
        }

        Map<MenuItem, Integer> itemQuantities = new HashMap<>();
        double total = 0;

        for (MenuItem item : selectedItems) {
            TextInputDialog qtyDialog = new TextInputDialog("1");
            qtyDialog.setHeaderText("Enter quantity for " + item.getName() + ":");
            int qty;
            try {
                qty = Integer.parseInt(qtyDialog.showAndWait().orElse(""));
                if (qty < 1) throw new Exception();
            } catch (Exception ex) {
                showAlert("Invalid quantity for " + item.getName(), "");
                return;
            }
            itemQuantities.put(item, qty);
            total += item.getPrice() * qty;
        }

        String fid = "SELECT orders_seq.NEXTVAL FROM dual";
        try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             Statement sid = c.createStatement();
             ResultSet rs = sid.executeQuery(fid)) {
            rs.next();
            int oid = rs.getInt(1);

            try (PreparedStatement insO = c.prepareStatement(
                 "INSERT INTO orders(order_id, table_number, total, is_paid) VALUES (?, ?, ?, 0)");
                 PreparedStatement insI = c.prepareStatement(
                 "INSERT INTO order_item(id, order_id, item_id) VALUES(order_item_seq.NEXTVAL, ?, ?)")) {
                insO.setInt(1, oid);
                insO.setInt(2, tno);
                insO.setDouble(3, total);
                insO.executeUpdate();

                for (Map.Entry<MenuItem, Integer> entry : itemQuantities.entrySet()) {
                    MenuItem item = entry.getKey();
                    int quantity = entry.getValue();
                    for (int i = 0; i < quantity; i++) {
                        insI.setInt(1, oid);
                        insI.setInt(2, item.getId());
                        insI.addBatch();
                    }
                }
                insI.executeBatch();
            }

            showAlert("Order placed", "Order ID: " + oid);
            loadOrders();

        } catch (Exception ex) {
            showAlert("Order failed", ex.getMessage());
        }
    }

    private void payBill(ListView<Order> lv) {
        Order o = lv.getSelectionModel().getSelectedItem();
        if (o == null || o.isPaid) {
            showAlert("Select an unpaid order", "");
            return;
        }
        TextInputDialog cd = new TextInputDialog();
        cd.setHeaderText("Enter 4-digit card number:");
        String cdn = cd.showAndWait().orElse("");
        if (!cdn.matches("\\d{4}")) {
            showAlert("Invalid card number", "");
            return;
        }
        TextInputDialog fd = new TextInputDialog();
        fd.setHeaderText("Feedback (optional):");
        String fb = fd.showAndWait().orElse("");

        try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement p = c.prepareStatement(
             "UPDATE orders SET is_paid=1, card_number=?, feedback=? WHERE order_id=?")) {
            p.setString(1, cdn);
            p.setString(2, fb);
            p.setInt(3, o.orderId);
            p.executeUpdate();
            showAlert("Payment Successful", "");
            loadOrders();

        } catch (Exception ex) {
            showAlert("Payment Error", ex.getMessage());
        }
    }

    private void payAllBills() {
        TextInputDialog cd = new TextInputDialog();
        cd.setHeaderText("Enter 4-digit card number to pay ALL:");
        String cdn = cd.showAndWait().orElse("");
        if (!cdn.matches("\\d{4}")) {
            showAlert("Invalid card number", "");
            return;
        }
        TextInputDialog fd = new TextInputDialog();
        fd.setHeaderText("Feedback (same for all):");
        String fb = fd.showAndWait().orElse("");

        try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
             PreparedStatement p = c.prepareStatement(
             "UPDATE orders SET is_paid=1, card_number=?, feedback=? WHERE is_paid=0")) {
            p.setString(1, cdn);
            p.setString(2, fb);
            int count = p.executeUpdate();
            showAlert("Paid " + count + " orders", "");
            loadOrders();

        } catch (Exception ex) {
            showAlert("Error paying all", ex.getMessage());
        }
    }

    private void showAdminPanel() {
        Dialog<Void> dialog = new Dialog<>();
        dialog.setTitle("Admin Panel");
        dialog.getDialogPane().getButtonTypes().add(ButtonType.CLOSE);
        VBox vb = new VBox(10);
        vb.setPadding(new Insets(10));

        Button viewOrders = new Button("View All Orders");
        viewOrders.setOnAction(e -> showTextDump("Orders", () -> {
            StringBuilder sb = new StringBuilder();
            try (Connection c = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
                 Statement s = c.createStatement();
                 ResultSet rs = s.executeQuery("SELECT * FROM orders ORDER BY order_id")) {
                while (rs.next()) {
                    sb.append("ID:").append(rs.getInt("order_id"))
                      .append(" | Table:").append(rs.getInt("table_number"))
                      .append(" | ₹").append(rs.getDouble("total"))
                      .append(" | Paid:").append(rs.getInt("is_paid") == 1 ? "Yes" : "No")
                      .append(" | Card:").append(rs.getString("card_number"))
                      .append(" | Feedback:").append(rs.getString("feedback"))
                      .append("\n");
                }
            } catch (Exception ex) {
                sb.append("SQL fail: ").append(ex.getMessage());
            }
            return sb.toString();
        }));

        Button viewSales = new Button("Total Sales");
        viewSales.setOnAction(e -> {
            double sum = orders.stream()
                               .filter(o -> o.isPaid)
                               .mapToDouble(o -> o.total)
                               .sum();
            showAlert("Sales", "₹" + sum);
        });

        Button viewFeedback = new Button("Feedback Received");
        viewFeedback.setOnAction(e -> showTextDump("Feedback", () -> {
            StringBuilder sb = new StringBuilder();
            orders.stream()
                  .filter(o -> o.feedback != null && !o.feedback.trim().isEmpty())
                  .forEach(o -> sb.append("ID ").append(o.orderId)
                                  .append(": ").append(o.feedback).append("\n"));
            return sb.toString();
        }));

        vb.getChildren().addAll(viewOrders, viewSales, viewFeedback);
        dialog.getDialogPane().setContent(vb);
        dialog.showAndWait();
    }

    private void showTextDump(String title, Supplier<String> supplier) {
        Stage st = new Stage();
        TextArea ta = new TextArea(supplier.get());
        ta.setEditable(false);
        st.setScene(new Scene(ta, 500, 400));
        st.setTitle(title);
        st.show();
    }

    private void showAlert(String title, String msg) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION, msg);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.showAndWait();
    }
}
  ##### create a MenuItem Class #####

      package application;

import javafx.beans.property.*;

public class MenuItem {
    private final IntegerProperty id = new SimpleIntegerProperty();
    private final StringProperty name = new SimpleStringProperty();
    private final DoubleProperty price = new SimpleDoubleProperty();

    public MenuItem(int id, String name, double price) {
        this.id.set(id);
        this.name.set(name);
        this.price.set(price);
    }

    public int getId() {
        return id.get();
    }

    public IntegerProperty idProperty() {
        return id;
    }

    public String getName() {
        return name.get();
    }

    public StringProperty nameProperty() {
        return name;
    }

    public double getPrice() {
        return price.get();
    }

    public DoubleProperty priceProperty() {
        return price;
    }

    @Override
    public String toString() {
        return "MenuItem{id=" + getId() + ", name='" + getName() + "', price=" + getPrice() + "}";
    }
}
 #### create a Order Class ###

      package application;


import javafx.beans.property.*;

public class Order {
    private final IntegerProperty orderId;
    private final DoubleProperty total;

    public Order(int orderId, double total) {
        this.orderId = new SimpleIntegerProperty(orderId);
        this.total = new SimpleDoubleProperty(total);
    }

    public int getOrderId() {
        return orderId.get();
    }

    public IntegerProperty orderIdProperty() {
        return orderId;
    }

    public double getTotal() {
        return total.get();
    }

    public DoubleProperty totalProperty() {
        return total;
    }
}
STEP 5:
     Run the main program ........
      Then it displays output in new window

        
